{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/shared/header/header.component.html","webpack:///./src/app/shared/share-speech/share-speech.component.html","webpack:///./src/app/shared/speech-main/speech-main.component.html","webpack:///./src/app/shared/speech-sidebar/speech-sidebar.component.html","webpack:///./src/app/speeches/add/add.component.html","webpack:///./src/app/speeches/search/search.component.html","webpack:///./src/app/speeches/speeches.component.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/guards/pending-changes.guard.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/app/services/speeches.store.ts","webpack:///./src/app/shared/header/header.component.css","webpack:///./src/app/shared/header/header.component.ts","webpack:///./src/app/shared/models/speech.model.ts","webpack:///./src/app/shared/share-speech/share-speech.component.css","webpack:///./src/app/shared/share-speech/share-speech.component.ts","webpack:///./src/app/shared/speech-main/speech-main.component.css","webpack:///./src/app/shared/speech-main/speech-main.component.ts","webpack:///./src/app/shared/speech-sidebar/speech-sidebar.component.css","webpack:///./src/app/shared/speech-sidebar/speech-sidebar.component.ts","webpack:///./src/app/speeches/add/add.component.css","webpack:///./src/app/speeches/add/add.component.ts","webpack:///./src/app/speeches/search/search.component.css","webpack:///./src/app/speeches/search/search.component.ts","webpack:///./src/app/speeches/speeches-routing.module.ts","webpack:///./src/app/speeches/speeches.component.css","webpack:///./src/app/speeches/speeches.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["var map = {\n\t\"./speeches/speeches.module\": [\n\t\t\"./src/app/speeches/speeches.module.ts\",\n\t\t\"speeches-speeches-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","module.exports = \"<div class=\\\"navbar-wrapper\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\\\">\\r\\n      <div class=\\\"container\\\">\\r\\n        <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\"><i class=\\\"fa fa-list-alt\\\" style=\\\"color: white;\\\"></i> Speech App</a>\\r\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSpeech\\\" aria-controls=\\\"navbarsExampleDefault\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n          <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n        </button>\\r\\n        <div id=\\\"navbarSpeech\\\" class=\\\"navbar-collapse collapse justify-content-end\\\">\\r\\n          <ul class=\\\"navbar-nav\\\">\\r\\n            <li class=\\\"nav-item\\\">\\r\\n              <a class=\\\"nav-link\\\" routerLink=\\\"/\\\" routerLinkActive=\\\"active-link\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\"><i class=\\\"fa fa-folder\\\" style=\\\"color: white;\\\"></i> My Speeches</a>\\r\\n            </li>\\r\\n            <li class=\\\"nav-item\\\">\\r\\n              <a class=\\\"nav-link\\\" routerLink=\\\"/speeches/add\\\" routerLinkActive=\\\"active-link\\\"><i class=\\\"fa fa-plus\\\" style=\\\"color: white;\\\"></i> Submit Speech</a>\\r\\n            </li>\\r\\n            <li class=\\\"nav-item\\\">\\r\\n              <a class=\\\"nav-link\\\" routerLink=\\\"/speeches/search\\\" routerLinkActive=\\\"active-link\\\" ><i class=\\\"fa fa-search\\\" style=\\\"color: white;\\\"></i> Search Speeches</a>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </nav>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title pull-left\\\"><i class=\\\"fa fa-mail-forward\\\"></i> Share Speech</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <form [formGroup]=\\\"emailForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email:</label>\\n      <input type=\\\"text\\\" formControlName=\\\"email\\\" id=\\\"email\\\" class=\\\"form-control\\\" placeholder=\\\"Enter email\\\" required>\\n      <div *ngIf=\\\"emailForm.controls.email.invalid && (emailForm.controls.email.dirty || emailForm.controls.email.touched)\\\"\\n        class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <span *ngIf=\\\"emailForm.controls.email.errors.required\\\">\\n          Email is required.\\n        </span>\\n        <span *ngIf=\\\"emailForm.controls.email.errors.email\\\">\\n          Invalid email.\\n        </span>\\n      </div>\\n    </div>\\n    <div class=\\\"modal-footer\\\" >\\n      <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"bsModalRef.hide()\\\">Close</button>\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!emailForm.valid\\\" style=\\\"float: right;\\\">\\n        <span *ngIf=\\\"isProcessingRequest\\\"><i class=\\\"fa fa-spinner fa-spin\\\"></i></span>\\n        <span *ngIf=\\\"!isProcessingRequest\\\">Save</span>\\n      </button>\\n    </div>\\n  </form>\\n</div>\\n\"","module.exports = \"<form [formGroup]=\\\"speechForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"body\\\">Speech:</label>\\n      <textarea formControlName=\\\"body\\\" rows=\\\"12\\\" id=\\\"body\\\" class=\\\"form-control\\\"  placeholder=\\\"Enter speech text\\\" required></textarea>\\n      <div *ngIf=\\\"speechForm.controls.body.invalid && (speechForm.controls.body.dirty || speechForm.controls.body.touched)\\\"\\n        class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <span *ngIf=\\\"speechForm.controls.body.errors.required\\\">\\n          Speech content is required.\\n        </span>\\n        <span *ngIf=\\\"speechForm.controls.body.errors.minlength\\\">\\n          Speech must be at least 10 characters long.\\n        </span>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"author\\\">Author:</label>\\n      <input type=\\\"text\\\" formControlName=\\\"author\\\" id=\\\"author\\\" class=\\\"form-control\\\" placeholder=\\\"Enter author\\\" required>\\n      <div *ngIf=\\\"speechForm.controls.author.invalid && (speechForm.controls.author.dirty || speechForm.controls.author.touched)\\\"\\n        class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <span *ngIf=\\\"speechForm.controls.author.errors.required\\\">\\n          Author is required.\\n        </span>\\n        <span *ngIf=\\\"speechForm.controls.author.errors.minlength\\\">\\n          Author must be at least 10 characters long.\\n        </span>\\n        <span *ngIf=\\\"speechForm.controls.author.errors.pattern\\\">\\n          Author must contain characters.\\n        </span>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"keywords\\\" tooltip=\\\"Double click keyword to edit. Enter to confirm.\\\">Keywords:</label>\\n      <tag-input formControlName=\\\"keywords\\\" [editable]=\\\"true\\\" [(ngModel)]=\\\"speech.keywords\\\" *ngIf=\\\"speech\\\"></tag-input>\\n      <div *ngIf=\\\"speechForm.controls.keywords.invalid && (speechForm.controls.keywords.dirty || speechForm.controls.keywords.touched)\\\"\\n        class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <span *ngIf=\\\"speechForm.controls.keywords.errors.required\\\">\\n          Keywords is required.\\n        </span>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"date\\\">Date:</label>\\n      <input type=\\\"text\\\" formControlName=\\\"date\\\" placeholder=\\\"Date\\\" placeholder=\\\"Enter date\\\" placement=\\\"top\\\"\\n        id=\\\"date\\\" class=\\\"form-control\\\" [bsConfig]=\\\"{ isAnimated: true }\\\" bsDatepicker required>\\n      <div *ngIf=\\\"speechForm.controls.date.invalid && (speechForm.controls.date.dirty || speechForm.controls.date.touched)\\\"\\n        class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <span *ngIf=\\\"speechForm.controls.date.errors.required\\\">\\n          Date is required.\\n        </span>\\n      </div>\\n    </div>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary share-btn\\\" [disabled]=\\\"!speechForm.valid\\\" (click)=\\\"openModal()\\\" style=\\\"float: right;\\\">\\n      <span>Share</span>\\n    </button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success save-btn\\\" [disabled]=\\\"!speechForm.valid\\\" style=\\\"float: right;\\\">\\n      <span *ngIf=\\\"isProcessingRequest\\\"><i class=\\\"fa fa-spinner fa-spin\\\"></i></span>\\n      <span *ngIf=\\\"!isProcessingRequest\\\">Save</span>\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger delete-btn\\\" [disabled]=\\\"!speechForm.valid\\\" (click)=\\\"onDelete()\\\" style=\\\"float: right;\\\">\\n      <span>Delete</span>\\n    </button>\\n</form>\\n\"","module.exports = \"<h2>\\n  <span class=\\\"primary-text\\\"><i class=\\\"fa fa-file\\\" style=\\\"color: black;\\\"></i> My Speeches</span>\\n</h2>\\n<br>\\n<ng-container *ngIf=\\\"speeches.length > 0; else emptySpeech\\\">\\n  <ul class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item\\\" *ngFor=\\\"let speech of speeches\\\">\\n      <button class=\\\"btn btn-outline-secondary btn-block speeches-btn\\\" (click)=\\\"onSelect(speech)\\\">\\n        <b>Author:</b> {{ speech.author }}\\n        <span class=\\\"badge badge-pill badge-primary\\\" tooltip=\\\"{{speech.emailAddress.length}} Shares\\\">\\n          {{speech.emailAddress.length}}\\n        </span>\\n      </button>\\n    </li>\\n  </ul>\\n</ng-container>\\n<ng-template #emptySpeech>\\n  No speech found.\\n</ng-template>\\n\"","module.exports = \"<app-header></app-header>\\n\\n<main role=\\\"main\\\" class=\\\"container-md\\\">\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-sm-8 col-md-8 col-offset-4 mb-3\\\">\\n      <h2>\\n        <span class=\\\"primary-text\\\"><i class=\\\"fa fa-pencil-square\\\" style=\\\"color: black;\\\"></i> Submit New Speech</span>\\n      </h2>\\n      <br>\\n      <form [formGroup]=\\\"speechForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"body\\\">Speech:</label>\\n          <textarea formControlName=\\\"body\\\" rows=\\\"12\\\" id=\\\"body\\\" class=\\\"form-control\\\"  placeholder=\\\"Enter speech text\\\" required></textarea>\\n          <div *ngIf=\\\"speechForm.controls.body.invalid && (speechForm.controls.body.dirty || speechForm.controls.body.touched)\\\"\\n            class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n            <span *ngIf=\\\"speechForm.controls.body.errors.required\\\">\\n              Speech content is required.\\n            </span>\\n            <span *ngIf=\\\"speechForm.controls.body.errors.minlength\\\">\\n              Speech must be at least 10 characters long.\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"author\\\">Author:</label>\\n          <input type=\\\"text\\\" formControlName=\\\"author\\\" id=\\\"author\\\" class=\\\"form-control\\\" placeholder=\\\"Enter author\\\" required>\\n          <div *ngIf=\\\"speechForm.controls.author.invalid && (speechForm.controls.author.dirty || speechForm.controls.author.touched)\\\"\\n            class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n            <span *ngIf=\\\"speechForm.controls.author.errors.required\\\">\\n              Author is required.\\n            </span>\\n            <span *ngIf=\\\"speechForm.controls.author.errors.minlength\\\">\\n              Author must be at least 10 characters long.\\n            </span>\\n            <span *ngIf=\\\"speechForm.controls.author.errors.pattern\\\">\\n              Author must contain characters.\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"keywords\\\" tooltip=\\\"Double click keyword to edit. Enter to confirm.\\\">Keywords:</label>\\n          <tag-input formControlName=\\\"keywords\\\" [editable]=\\\"true\\\" [(ngModel)]=\\\"keywords\\\"></tag-input>\\n          <div *ngIf=\\\"speechForm.controls.keywords.invalid && (speechForm.controls.keywords.dirty || speechForm.controls.keywords.touched)\\\"\\n            class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n            <span *ngIf=\\\"speechForm.controls.keywords.errors.required\\\">\\n              Keywords is required.\\n            </span>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"date\\\">Date:</label>\\n          <input type=\\\"text\\\" formControlName=\\\"date\\\" placeholder=\\\"Date\\\" placeholder=\\\"Enter date\\\" placement=\\\"top\\\"\\n            id=\\\"date\\\" class=\\\"form-control\\\" [bsConfig]=\\\"{ isAnimated: true }\\\" bsDatepicker required>\\n          <div *ngIf=\\\"speechForm.controls.date.invalid && (speechForm.controls.date.dirty || speechForm.controls.date.touched)\\\"\\n            class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n            <span *ngIf=\\\"speechForm.controls.date.errors.required\\\">\\n              Date is required.\\n            </span>\\n          </div>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success save-btn\\\" [disabled]=\\\"!speechForm.valid\\\" style=\\\"float: right;\\\">\\n          <span *ngIf=\\\"isProcessingRequest\\\"><i class=\\\"fa fa-spinner fa-spin\\\"></i></span>\\n          <span *ngIf=\\\"!isProcessingRequest\\\">Save</span>\\n        </button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning clear-btn\\\" [disabled]=\\\"!speechForm.valid\\\" (click)=\\\"onClear()\\\" style=\\\"float: right;\\\">\\n          <span>Clear</span>\\n        </button>\\n      </form>\\n    </div>\\n  </div>\\n</main>\\n\"","module.exports = \"<app-header></app-header>\\n\\n<main role=\\\"main\\\" class=\\\"container-md\\\">\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-sm-8 col-md-8 col-offset-4 mb-3\\\">\\n      <h2>\\n        <span class=\\\"primary-text\\\"><i class=\\\"fa fa-search\\\" style=\\\"color: black;\\\"></i> Search Speeches</span>\\n      </h2>\\n      <br>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"categories\\\">Search By:</label>\\n        <select class=\\\"form-control\\\" id=\\\"categories\\\" #categories (change)=\\\"setSearchCategory(categories.value)\\\">\\n          <option selected></option>\\n          <option value=\\\"1\\\">Author</option>\\n          <option value=\\\"2\\\">Date</option>\\n          <option value=\\\"3\\\">Keyword</option>\\n          <option value=\\\"4\\\">Speech Text</option>\\n        </select>\\n        <ng-container *ngIf=\\\"speeches$ | async as speeches\\\">\\n          <form [formGroup]=\\\"searchForm\\\">\\n            <input formControlName=\\\"speeches\\\"\\n              [isAnimated]=\\\"true\\\"\\n              [typeahead]=\\\"speeches\\\"\\n              [typeaheadOptionsLimit]=\\\"100\\\"\\n              [typeaheadLatinize]=\\\"false\\\"\\n              [typeaheadMinLength]=\\\"1\\\"\\n              (typeaheadNoResults)=\\\"typeaheadNoResults($event)\\\"\\n              (typeaheadOnSelect)=\\\"onSelect($event.item)\\\"\\n              typeaheadOptionField=\\\"{{category}}\\\"\\n              placeholder=\\\"Enter search value\\\"\\n              class=\\\"form-control\\\">\\n          </form>\\n          <div class=\\\"alert alert-danger\\\" *ngIf=\\\"noResult\\\">No Results Found</div>\\n        </ng-container>\\n      </div>\\n      <form [formGroup]=\\\"speechForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"body\\\">Speech:</label>\\n          <textarea formControlName=\\\"body\\\" rows=\\\"12\\\" id=\\\"body\\\" class=\\\"form-control\\\"></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"author\\\">Author:</label>\\n          <input type=\\\"text\\\" formControlName=\\\"author\\\" id=\\\"author\\\" class=\\\"form-control\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"keywords\\\" tooltip=\\\"Double click keyword to edit\\\">Keywords:</label>\\n          <tag-input formControlName=\\\"keywords\\\" [removable]=\\\"false\\\" [hideForm]=\\\"true\\\" [(ngModel)]=\\\"keywords\\\"></tag-input>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"date\\\">Date:</label>\\n          <input type=\\\"text\\\" formControlName=\\\"date\\\" placement=\\\"top\\\"\\n            id=\\\"date\\\" class=\\\"form-control\\\" [bsConfig]=\\\"{ isAnimated: true }\\\" bsDatepicker>\\n        </div>\\n    </form>\\n    </div>\\n  </div>\\n</main>\\n\"","module.exports = \"<app-header></app-header>\\n\\n<main role=\\\"main\\\" class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-4 col-md-4\\\">\\n      <app-speech-sidebar [speeches]=\\\"speeches$ | async\\\" (speechChanged)=\\\"onSelect($event)\\\"></app-speech-sidebar>\\n    </div>\\n    <div class=\\\"col-sm-8 col-md-8 mb-3\\\">\\n      <app-speech-main [speech]=\\\"selectedSpeech\\\"></app-speech-main>\\n    </div>\\n  </div>\\n</main>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: './speeches/speeches.module#SpeechesModule',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    redirectTo: 'speeches',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <router-outlet></router-outlet>\n  `,\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'speeches-app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SpeechesRoutingModule } from './speeches/speeches-routing.module';\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { AppComponent } from './app.component';\nimport { ShareSpeechComponent } from './shared/share-speech/share-speech.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ShareSpeechComponent\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    HttpClientModule,\n    SpeechesRoutingModule,\n    ReactiveFormsModule,\n    ToastrModule.forRoot({\n      timeOut: 2000,\n      positionClass: 'toast-top-right',\n      preventDuplicates: true,\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  entryComponents: [ShareSpeechComponent]\n})\nexport class AppModule { }\n","import { CanDeactivate } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AddComponent } from './../speeches/add/add.component';\r\n\r\n@Injectable()\r\nexport class PendingChangesGuard implements CanDeactivate<AddComponent> {\r\n  canDeactivate(component: AddComponent): Observable<boolean> | boolean {\r\n    return component.canDeactivate() ? true : confirm('Changes you made may not be saved.');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { shareReplay } from 'rxjs/operators';\r\n\r\nimport { Speech } from '../shared/models/speech.model';\r\nimport Speeches from './data.json';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  private speeches: Speech[] = Speeches;\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Load all speeches\r\n   */\r\n  loadSpeeches(): Observable<Speech[]> {\r\n    return of(this.speeches).pipe(\r\n      shareReplay()\r\n    );\r\n  }\r\n}\r\n","import { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { tap } from 'rxjs/operators';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { DataService } from './data.service';\r\nimport { Speech } from '../shared/models/speech.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpeechesStore {\r\n\r\n  private subject = new BehaviorSubject<Speech[]>(null);\r\n  speeches$: Observable<Speech[]> = this.subject.asObservable();\r\n\r\n  constructor(private dataService: DataService,\r\n              private toastr: ToastrService) {\r\n              this.loadSpeeches();\r\n  }\r\n\r\n  /**\r\n   * @param speech\r\n   * Adds new speech\r\n   */\r\n  addSpeech(speech: Speech): Observable<any> {\r\n    const speeches = this.subject.getValue();\r\n    speeches.push(speech);\r\n\r\n    this.subject.next(speeches);\r\n\r\n    return of(speech);\r\n  }\r\n\r\n  /**\r\n   * @param postId\r\n   * Deletes a speech\r\n   */\r\n  deleteSpeech(speechId: number): Observable<boolean> {\r\n    const speeches = this.subject.getValue();\r\n    const newSpeeches = speeches.filter(speech => speech.id !== speechId);\r\n\r\n    this.subject.next(newSpeeches);\r\n\r\n    return of(true);\r\n  }\r\n\r\n  /**\r\n   * Load all speeches\r\n   */\r\n  loadSpeeches(): void {\r\n    this.dataService.loadSpeeches().pipe(\r\n      tap(speeches => this.subject.next(speeches))\r\n    ).subscribe();\r\n  }\r\n\r\n  /**\r\n   * Get all speeches\r\n   */\r\n  getSpeeches(): Observable<Speech[]> {\r\n    return this.speeches$;\r\n  }\r\n\r\n  /**\r\n   * @param postId\r\n   * @param changes\r\n   * Update speech\r\n   */\r\n  saveSpeech(speechId: number, changes: Partial<Speech>): Observable<any> {\r\n    const speeches = this.subject.getValue();\r\n    const speechIndex = speeches.findIndex(post => post.id === speechId);\r\n    const newCourse: Speech = {\r\n      ...speeches[speechIndex],\r\n      ...changes\r\n    };\r\n    const newCourses: Speech[] = speeches.slice(0);\r\n    newCourses[speechIndex] = newCourse;\r\n\r\n    this.subject.next(newCourses);\r\n\r\n    return of(speeches[speechIndex]);\r\n  }\r\n}\r\n","module.exports = \".active-link {\\r\\n  color: #fff !important;\\r\\n  font-weight: 500;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHNCQUFzQjtFQUN0QixnQkFBZ0I7QUFDbEIiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmFjdGl2ZS1saW5rIHtcclxuICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","export class Speech {\r\n  id: number;\r\n  author: string;\r\n  keywords: string[];\r\n  emailAddress: string[];\r\n  body: string;\r\n  date: string;\r\n\r\n  constructor() {\r\n    this.id = null;\r\n    this.author = '';\r\n    this.keywords = [];\r\n    this.emailAddress = [];\r\n    this.body = '';\r\n    this.date = '';\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9zaGFyZS1zcGVlY2gvc2hhcmUtc3BlZWNoLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { tap } from 'rxjs/operators';\n\nimport { SpeechesStore } from './../../services/speeches.store';\nimport { Speech } from '../models/speech.model';\n\n@Component({\n  selector: 'app-share-speech',\n  templateUrl: './share-speech.component.html',\n  styleUrls: ['./share-speech.component.css']\n})\nexport class ShareSpeechComponent implements OnInit {\n\n  emailForm: FormGroup;\n  isProcessingRequest: boolean;\n  speech: Speech;\n  public event: EventEmitter<any> = new EventEmitter();\n\n  constructor(public bsModalRef: BsModalRef,\n              private speechesStore: SpeechesStore) {}\n\n  ngOnInit() {\n    this.initializeSpeechForm();\n  }\n\n  /**\n   * Initialize email form\n   */\n  initializeSpeechForm(): void {\n    this.emailForm = new FormGroup({\n      'email': new FormControl('', [Validators.required, Validators.email])\n    });\n  }\n\n  /**\n   * Save email share\n   */\n  onSubmit() {\n    const email = this.emailForm.value.email;\n    this.speech.emailAddress.push(email);\n    this.speechesStore.saveSpeech(this.speech.id, this.speech).pipe(\n      tap(res => {\n        this.event.emit(email);\n        this.bsModalRef.hide();\n      })\n    ).subscribe();\n  }\n}\n","module.exports = \".delete-btn, .share-btn, .save-btn {\\r\\n  margin-left: 20px;\\r\\n  width: 80px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NwZWVjaC1tYWluL3NwZWVjaC1tYWluLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxpQkFBaUI7RUFDakIsV0FBVztBQUNiIiwiZmlsZSI6InNyYy9hcHAvc2hhcmVkL3NwZWVjaC1tYWluL3NwZWVjaC1tYWluLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZGVsZXRlLWJ0biwgLnNoYXJlLWJ0biwgLnNhdmUtYnRuIHtcclxuICBtYXJnaW4tbGVmdDogMjBweDtcclxuICB3aWR0aDogODBweDtcclxufVxyXG4iXX0= */\"","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { tap } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { ShareSpeechComponent } from '../share-speech/share-speech.component';\nimport { SpeechesStore } from './../../services/speeches.store';\nimport { Speech } from '../models/speech.model';\n\n@Component({\n  selector: 'app-speech-main',\n  templateUrl: './speech-main.component.html',\n  styleUrls: ['./speech-main.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpeechMainComponent implements OnInit, OnChanges {\n\n  @Input() speech: Speech;\n\n  isProcessingRequest: boolean;\n  modalRef: BsModalRef;\n  speechForm: FormGroup;\n\n  constructor(private modalService: BsModalService,\n              private speechesStore: SpeechesStore,\n              private toastr: ToastrService) { }\n\n  ngOnInit() {\n    this.initializeSpeechForm();\n  }\n\n  ngOnChanges() {\n    if (this.speech) {\n      this.speechForm.patchValue(this.speech);\n      this.speechForm.enable();\n    }\n  }\n\n  /**\n   * Initialize post form\n   */\n  initializeSpeechForm(): void {\n    this.speechForm = new FormGroup({\n      'id': new FormControl(''),\n      'author': new FormControl('', [Validators.required, Validators.minLength(10), Validators.pattern('^[a-zA-Z].*[\\s\\.]*$')]),\n      'keywords': new FormControl('', [Validators.required]),\n      'date': new FormControl('', [Validators.required]),\n      'body': new FormControl('', [Validators.required, Validators.minLength(10)]),\n      'emailAddress': new FormControl([])\n    });\n    this.speechForm.disable();\n  }\n\n  /**\n   * Deletes a speech\n   */\n  onDelete(): void {\n    const speech = this.speechForm.value;\n    this.speechesStore.deleteSpeech(speech.id).pipe(\n      tap(res => {\n        this.speechForm.reset();\n        this.speechForm.disable();\n        this.toastr.warning('Speech deleted!', 'Speech App');\n      })\n    ).subscribe();\n  }\n\n  /**\n   * Update speech\n   */\n  onSubmit(): void {\n    const speech: Speech = this.speechForm.value;\n    speech.keywords = this.speech.keywords;\n    this.isProcessingRequest = true;\n    this.speechesStore.saveSpeech(speech.id, speech).pipe(\n      tap(res => {\n        this.isProcessingRequest = false;\n        this.toastr.success('Speech updated!', 'Speech App');\n      })\n    ).subscribe();\n  }\n\n  /**\n   * Open share speech modal\n   */\n  openModal(): void {\n    const initialState = {\n      speech: this.speechForm.value\n    };\n    this.modalRef = this.modalService.show(ShareSpeechComponent, {initialState});\n    this.modalRef.content.event.subscribe(email => {\n      this.toastr.success(`Speech shared to ${email}.`, 'Speech App');\n    });\n  }\n}\n","module.exports = \".list-group {\\r\\n  margin-bottom: 50px;\\r\\n}\\r\\n\\r\\n.speeches-btn {\\r\\n  overflow: hidden;\\r\\n  text-overflow: ellipsis;\\r\\n  white-space: none;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NwZWVjaC1zaWRlYmFyL3NwZWVjaC1zaWRlYmFyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsdUJBQXVCO0VBQ3ZCLGlCQUFpQjtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9zcGVlY2gtc2lkZWJhci9zcGVlY2gtc2lkZWJhci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxpc3QtZ3JvdXAge1xyXG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XHJcbn1cclxuXHJcbi5zcGVlY2hlcy1idG4ge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbiAgd2hpdGUtc3BhY2U6IG5vbmU7XHJcbn1cclxuIl19 */\"","import { ChangeDetectionStrategy, Component,\n         EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Speech } from '../models/speech.model';\n\n\n@Component({\n  selector: 'app-speech-sidebar',\n  templateUrl: './speech-sidebar.component.html',\n  styleUrls: ['./speech-sidebar.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpeechSidebarComponent implements OnInit {\n\n  @Input() speeches: Speech[] = [];\n  @Output() private speechChanged = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Set selected speech\n   */\n  onSelect(speech: Speech): void {\n    this.speechChanged.emit(speech);\n  }\n}\n","module.exports = \"main {\\r\\n  margin-top: 100px;\\r\\n}\\r\\n\\r\\n.clear-btn, .save-btn {\\r\\n  margin-left: 20px;\\r\\n  width: 80px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3BlZWNoZXMvYWRkL2FkZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLFdBQVc7QUFDYiIsImZpbGUiOiJzcmMvYXBwL3NwZWVjaGVzL2FkZC9hZGQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1haW4ge1xyXG4gIG1hcmdpbi10b3A6IDEwMHB4O1xyXG59XHJcblxyXG4uY2xlYXItYnRuLCAuc2F2ZS1idG4ge1xyXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gIHdpZHRoOiA4MHB4O1xyXG59XHJcbiJdfQ== */\"","import { Component, HostListener, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { SpeechesStore } from './../../services/speeches.store';\nimport { Speech } from 'src/app/shared/models/speech.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-add',\n  templateUrl: './add.component.html',\n  styleUrls: ['./add.component.css']\n})\nexport class AddComponent implements OnInit {\n\n  isProcessingRequest: boolean;\n  keywords: string[];\n  speechForm: FormGroup;\n\n  constructor(private speechesStore: SpeechesStore,\n              private toastr: ToastrService) { }\n\n  @HostListener('window:beforeunload')\n  canDeactivate(): Observable<boolean> | boolean {\n    return !this.speechForm.dirty;\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n  }\n\n  /**\n   * Initialize speech form\n   */\n  initializeForm(): void {\n    this.speechForm = new FormGroup({\n      'id': new FormControl(new Date()),\n      'author': new FormControl('', [Validators.required, Validators.minLength(10), Validators.pattern('^[a-zA-Z].*[\\s\\.]*$')]),\n      'keywords': new FormControl('', [Validators.required]),\n      'date': new FormControl('', [Validators.required]),\n      'body': new FormControl('', [Validators.required, Validators.minLength(10)]),\n      'emailAddress': new FormControl([])\n    });\n  }\n\n  /**\n   * Clear speech form\n   */\n  onClear() {\n    this.speechForm.reset();\n  }\n\n  /**\n   * Add new speech\n   */\n  onSubmit(): void {\n    const speech: Speech = this.speechForm.value;\n    this.isProcessingRequest = true;\n    this.speechesStore.addSpeech(speech).pipe(\n      tap((speech: Speech) => {\n        this.isProcessingRequest = false;\n        this.toastr.success(`Speech by ${speech.author} is added!`, 'Speech App');\n        this.speechForm.reset();\n      })\n    ).subscribe();\n  }\n}\n","module.exports = \"main {\\r\\n  margin-top: 100px;\\r\\n}\\r\\n\\r\\n::ng-deep .dropdown-menu {\\r\\n  width: 100% !important;\\r\\n}\\r\\n\\r\\n::ng-deep .dropdown-item {\\r\\n  text-overflow: ellipsis;\\r\\n  white-space: nowrap;\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3BlZWNoZXMvc2VhcmNoL3NlYXJjaC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixnQkFBZ0I7QUFDbEIiLCJmaWxlIjoic3JjL2FwcC9zcGVlY2hlcy9zZWFyY2gvc2VhcmNoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYWluIHtcclxuICBtYXJnaW4tdG9wOiAxMDBweDtcclxufVxyXG5cclxuOjpuZy1kZWVwIC5kcm9wZG93bi1tZW51IHtcclxuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG46Om5nLWRlZXAgLmRyb3Bkb3duLWl0ZW0ge1xyXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG4iXX0= */\"","import { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\n\nimport { SpeechesStore } from './../../services/speeches.store';\nimport { Speech } from 'src/app/shared/models/speech.model';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  category: string = 'author';\n  keywords: string[] = [];\n  noResult = false;\n  searchForm: FormGroup;\n  speeches$: Observable<Speech[]>;\n  speechForm: FormGroup;\n\n  constructor(private speechesStore: SpeechesStore) { }\n\n  ngOnInit() {\n    this.speeches$ = this.speechesStore.getSpeeches();\n    this.initializeForms();\n  }\n\n  /**\n   * Initialize forms\n   */\n  initializeForms(): void {\n    this.searchForm = new FormGroup({\n      'speeches': new FormControl([])\n    });\n    this.speechForm = new FormGroup({\n      'author': new FormControl(''),\n      'keywords': new FormControl(''),\n      'date': new FormControl(''),\n      'body': new FormControl('')\n    });\n    this.speechForm.disable();\n  }\n\n  /**\n   * @param speech\n   * Set form values\n   */\n  onSelect(speech: Speech): void {\n    this.speechForm.patchValue(speech);\n    this.keywords = speech.keywords;\n  }\n\n  /**\n   * @param category\n   * Set search category\n   */\n  setSearchCategory(category: string): void {\n    switch (category) {\n      case '1':\n        this.category = 'author';\n        break;\n      case '2':\n        this.category = 'date';\n        break;\n      case '3':\n        this.category = 'keywords';\n        break;\n      default:\n        this.category = 'body';\n        break;\n    }\n  }\n\n  /**\n   * Show error when no results\n   */\n  typeaheadNoResults(event: boolean): void {\n    this.noResult = event;\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { PendingChangesGuard } from './../guards/pending-changes.guard';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { TagInputModule } from 'ngx-chips';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\r\n\r\nimport { AddComponent } from './add/add.component';\r\nimport { HeaderComponent } from './../shared/header/header.component';\r\nimport { SearchComponent } from './search/search.component';\r\nimport { SpeechesComponent } from './speeches.component';\r\nimport { SpeechSidebarComponent } from '../shared/speech-sidebar/speech-sidebar.component';\r\nimport { SpeechMainComponent } from '../shared/speech-main/speech-main.component';\r\n\r\nconst speechesRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SpeechesComponent\r\n  },\r\n  {\r\n    canDeactivate: [PendingChangesGuard],\r\n    path: 'speeches/add',\r\n    pathMatch: 'full',\r\n    component: AddComponent,\r\n  },\r\n  {\r\n    path: 'speeches/search',\r\n    pathMatch: 'full',\r\n    component: SearchComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AddComponent,\r\n    HeaderComponent,\r\n    SearchComponent,\r\n    SpeechesComponent,\r\n    SpeechSidebarComponent,\r\n    SpeechMainComponent\r\n  ],\r\n  imports: [\r\n    BsDatepickerModule.forRoot(),\r\n    CommonModule,\r\n    FormsModule,\r\n    ModalModule.forRoot(),\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(speechesRoutes),\r\n    TabsModule.forRoot(),\r\n    TagInputModule,\r\n    TooltipModule.forRoot(),\r\n    TypeaheadModule.forRoot(),\r\n  ],\r\n  exports: [RouterModule],\r\n  providers: [PendingChangesGuard]\r\n})\r\nexport class SpeechesRoutingModule { }\r\n","module.exports = \"main {\\r\\n  margin-top: 100px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc3BlZWNoZXMvc3BlZWNoZXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGlCQUFpQjtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL3NwZWVjaGVzL3NwZWVjaGVzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYWluIHtcclxuICBtYXJnaW4tdG9wOiAxMDBweDtcclxufVxyXG4iXX0= */\"","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/internal/Observable';\n\nimport { SpeechesStore } from '../services/speeches.store';\nimport { Speech } from '../shared/models/speech.model';\n\n@Component({\n  selector: 'app-speeches',\n  templateUrl: './speeches.component.html',\n  styleUrls: ['./speeches.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpeechesComponent implements OnInit {\n\n  selectedSpeech: Speech;\n  speeches$: Observable<Speech[]>;\n\n  constructor(public router: Router,\n              private speechesStore: SpeechesStore) { }\n\n  ngOnInit() {\n    this.speeches$ = this.speechesStore.getSpeeches();\n  }\n\n  /**\n   * Set selected speech\n   */\n  onSelect(speech: Speech): void {\n    this.selectedSpeech = speech;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}